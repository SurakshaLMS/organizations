# ==========================================
# ORGANIZATION MANAGEMENT SYSTEM
# Environment Configuration Template
# ==========================================
# Copy this file to .env and update values
# IMPORTANT: Change all secrets in production!
# ==========================================

# ==========================================
# DATABASE CONFIGURATION
# ==========================================
DB_HOST=your-database-host.com
DB_PORT=3306
DB_USERNAME=your_db_username
DB_PASSWORD=your_db_password
DB_DATABASE=organizations

# Source Database Configuration for Sync (LAAS Database)
SOURCE_DB_HOST=your-laas-database-host.com
SOURCE_DB_PORT=3306
SOURCE_DB_USERNAME=your_laas_db_username
SOURCE_DB_PASSWORD=your_laas_db_password
SOURCE_DB_DATABASE=laas

# LaaS Database Configuration (Primary Database)
LAAS_DATABASE_URL="mysql://username:password@host:3306/laas?connection_limit=10&pool_timeout=120&connect_timeout=120"

# ==========================================
# JWT AUTHENTICATION (CRITICAL - CHANGE IN PRODUCTION!)
# ==========================================
# Generate strong secrets: openssl rand -base64 64
JWT_SECRET="CHANGE-THIS-TO-A-STRONG-64-CHARACTER-SECRET-IN-PRODUCTION"
JWT_EXPIRES_IN="7d"
JWT_REFRESH_SECRET="CHANGE-THIS-TO-A-DIFFERENT-64-CHARACTER-SECRET-IN-PRODUCTION"
JWT_REFRESH_EXPIRES_IN="30d"

# ==========================================
# PASSWORD SECURITY
# ==========================================
BCRYPT_SALT_ROUNDS=12
BCRYPT_PEPPER="CHANGE-THIS-TO-A-STRONG-SECRET-IN-PRODUCTION"
PASSWORD_ENCRYPTION_KEY="CHANGE-THIS-TO-A-STRONG-64-CHARACTER-KEY-IN-PRODUCTION"
PASSWORD_ENCRYPTION_IV_LENGTH=12

# Password Policy
PASSWORD_MIN_LENGTH=8
PASSWORD_REQUIRE_UPPERCASE=true
PASSWORD_REQUIRE_LOWERCASE=true
PASSWORD_REQUIRE_NUMBERS=true
PASSWORD_REQUIRE_SPECIAL=false

# ==========================================
# XSS & INJECTION PROTECTION
# ==========================================
XSS_PROTECTION=true
ENABLE_CSRF=false
CSRF_SECRET="CHANGE-THIS-CSRF-SECRET-IN-PRODUCTION"

# ==========================================
# RATE LIMITING (DoS & Brute Force Protection)
# ==========================================
# Global Rate Limits
RATE_LIMIT_WINDOW_MS=900000  # 15 minutes
RATE_LIMIT_MAX_REQUESTS=100
THROTTLE_TTL_DEFAULT=60000  # 1 minute
THROTTLE_LIMIT_DEFAULT=100

# Login Rate Limiting (Brute Force Protection)
THROTTLE_TTL_LOGIN=900000  # 15 minutes
THROTTLE_LIMIT_LOGIN=5  # Max 5 login attempts per 15 minutes
LOGIN_ATTEMPT_WINDOW=900000

# ==========================================
# APPLICATION CONFIGURATION
# ==========================================
PORT=3001
NODE_ENV="development"  # production | development | staging

# ==========================================
# REQUEST SIZE LIMITS (DoS Protection)
# ==========================================
REQUEST_SIZE_LIMIT=10mb
MAX_FILE_SIZE=10485760  # 10MB in bytes
MAX_FILES_PER_REQUEST=10

# ==========================================
# QUERY PARAMETER LIMITS (Bulk Abuse Protection)
# ==========================================
MAX_PAGINATION_LIMIT=100
MAX_PAGE_NUMBER=1000
MAX_SEARCH_LENGTH=200
MAX_OFFSET=100000

# ==========================================
# STORAGE CONFIGURATION
# ==========================================
STORAGE_PROVIDER=local  # local | gcs | s3

# Local Storage (Development)
LOCAL_STORAGE_PATH=./uploads
LOCAL_STORAGE_BASE_URL=http://localhost:3001/uploads

# Google Cloud Storage (Production)
# GCS_BUCKET_NAME=your-bucket-name
# GCS_PROJECT_ID=your-project-id
# GCS_CLIENT_EMAIL=your-service-account@project.iam.gserviceaccount.com
# GCS_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n"

# AWS S3 (Production Alternative)
# AWS_ACCESS_KEY_ID=your-access-key
# AWS_SECRET_ACCESS_KEY=your-secret-key
# AWS_REGION=us-east-1
# AWS_S3_BUCKET=your-bucket-name

# ==========================================
# CORS CONFIGURATION (Cross-Origin Protection)
# ==========================================
# Development: Allow all origins
CORS_ORIGIN="*"
CORS_METHODS="GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS"
CORS_CREDENTIALS=true

# Production: Set specific whitelisted origins (comma-separated)
# ALLOWED_ORIGINS=https://yourdomain.com,https://app.yourdomain.com,https://admin.yourdomain.com

# ==========================================
# HTTPS/SSL CONFIGURATION (MITM Protection)
# ==========================================
# Development
HTTPS_ENABLED=false
FORCE_HTTPS=false

# Production: MUST enable HTTPS
# HTTPS_ENABLED=true
# FORCE_HTTPS=true
# SSL_CERT_PATH=/etc/ssl/certs/your-cert.pem
# SSL_KEY_PATH=/etc/ssl/private/your-key.pem

# ==========================================
# SECURITY HEADERS (MITM & Clickjacking Protection)
# ==========================================
HSTS_MAX_AGE=31536000  # 1 year
HSTS_INCLUDE_SUBDOMAINS=true
HSTS_PRELOAD=true
X_FRAME_OPTIONS=DENY
X_CONTENT_TYPE_OPTIONS=nosniff
X_XSS_PROTECTION=true
REFERRER_POLICY=strict-origin-when-cross-origin

# ==========================================
# USER SYNC CONFIGURATION
# ==========================================
USER_SYNC_ENABLED=true
USER_SYNC_CRON="0 2 * * *"  # Daily at 2 AM

# ==========================================
# SWAGGER CONFIGURATION
# ==========================================
# Development: Enable API documentation
ENABLE_SWAGGER=true
SWAGGER_ENABLED=true

# Production: DISABLE Swagger (security risk)
# ENABLE_SWAGGER=false
# SWAGGER_ENABLED=false

SWAGGER_TITLE="Organization Service API"
SWAGGER_DESCRIPTION="API documentation for the Organization Service"
SWAGGER_VERSION="1.0.0"
SWAGGER_PATH="/api-docs"

# ==========================================
# LOGGING CONFIGURATION
# ==========================================
# Development
LOG_LEVEL=debug  # debug | info | warn | error

# Production
# LOG_LEVEL=warn

LOG_TO_FILE=true
LOG_FILE_PATH=./logs
LOG_MAX_FILES=14  # Keep logs for 14 days
LOG_DATE_PATTERN=YYYY-MM-DD

# ==========================================
# MONITORING & HEALTH CHECKS
# ==========================================
HEALTH_CHECK_ENABLED=true
METRICS_ENABLED=true

# ==========================================
# SESSION SECURITY
# ==========================================
SESSION_SECRET="CHANGE-THIS-SESSION-SECRET-IN-PRODUCTION"
SESSION_COOKIE_SECURE=false  # Set to true in production (requires HTTPS)
SESSION_COOKIE_HTTP_ONLY=true
SESSION_COOKIE_SAME_SITE=strict  # strict | lax | none
SESSION_MAX_AGE=86400000  # 24 hours in milliseconds

# ==========================================
# OPTIONAL: ERROR TRACKING (Production)
# ==========================================
# Sentry
# SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id
# SENTRY_ENVIRONMENT=production

# ==========================================
# OPTIONAL: EMAIL NOTIFICATIONS
# ==========================================
# SMTP Configuration
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_SECURE=false
# SMTP_USER=your-email@gmail.com
# SMTP_PASSWORD=your-app-password
# EMAIL_FROM=noreply@yourdomain.com

# ==========================================
# PRODUCTION DEPLOYMENT CHECKLIST
# ==========================================
# Before deploying to production:
# [ ] Change JWT_SECRET to strong random value
# [ ] Change JWT_REFRESH_SECRET to different strong random value
# [ ] Change BCRYPT_PEPPER to strong random value
# [ ] Change PASSWORD_ENCRYPTION_KEY to strong random value
# [ ] Change CSRF_SECRET to strong random value
# [ ] Change SESSION_SECRET to strong random value
# [ ] Set NODE_ENV=production
# [ ] Set ALLOWED_ORIGINS to your actual domains
# [ ] Enable HTTPS_ENABLED=true
# [ ] Set FORCE_HTTPS=true
# [ ] Provide SSL_CERT_PATH and SSL_KEY_PATH
# [ ] Disable Swagger: SWAGGER_ENABLED=false
# [ ] Set LOG_LEVEL=warn
# [ ] Set SESSION_COOKIE_SECURE=true
# [ ] Configure production database credentials
# [ ] Configure production storage (GCS or S3)
# [ ] Set up error tracking (Sentry)
# [ ] Configure SMTP for email notifications
# [ ] Review and test all rate limits
# [ ] Run security audit: npm audit
# [ ] Run penetration tests
# [ ] Enable monitoring and alerting

# ==========================================
# SECURITY NOTES
# ==========================================
# 1. Never commit .env file to git
# 2. Use strong, unique secrets for each environment
# 3. Rotate secrets regularly (every 90 days)
# 4. Store secrets in secure vault (AWS Secrets Manager, HashiCorp Vault)
# 5. Enable HTTPS in production (mandatory)
# 6. Use environment-specific configurations
# 7. Review security logs daily
# 8. Keep dependencies updated: npm update
# 9. Run security audits: npm audit
# 10. Monitor rate limiting and failed auth attempts


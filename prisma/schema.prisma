generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId            BigInt             @id @default(autoincrement())
  email             String             @unique
  password          String             @db.VarChar(255)
  name              String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  lastSyncAt        DateTime?
  instituteUsers    InstituteUser[]
  organizationUsers OrganizationUser[]
  verifiedUsers     OrganizationUser[] @relation("VerifiedBy")

  @@map("user")
}

model Institute {
  instituteId    BigInt          @id @default(autoincrement())
  name           String
  imageUrl       String?         @db.VarChar(500)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  lastSyncAt     DateTime?
  instituteUsers InstituteUser[]
  organizations  Organization[]

  @@map("institute")
}

model InstituteUser {
  instituteId BigInt
  userId      BigInt
  role        InstituteRole @default(STUDENT)
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  lastSyncAt  DateTime?
  institute   Institute     @relation(fields: [instituteId], references: [instituteId], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([instituteId, userId])
  @@index([userId], map: "institute_users_userId_fkey")
  @@map("institute_users")
}

model Organization {
  organizationId            BigInt             @id @default(autoincrement())
  name                      String
  type                      OrganizationType
  isPublic                  Boolean            @default(false)
  enrollmentKey             String?
  needEnrollmentVerification Boolean           @default(true)
  imageUrl                  String?            @db.VarChar(500)
  instituteId               BigInt?
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  causes            Cause[]
  institute         Institute?         @relation(fields: [instituteId], references: [instituteId])
  organizationUsers OrganizationUser[]

  @@index([type])
  @@index([isPublic])
  @@index([instituteId])
  @@map("organization")
}

model OrganizationUser {
  organizationId BigInt
  userId         BigInt
  role           OrganizationRole @default(MEMBER)
  isVerified     Boolean          @default(false)
  verifiedBy     BigInt?
  verifiedAt     DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organization   Organization     @relation(fields: [organizationId], references: [organizationId], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [userId], onDelete: Cascade)
  verifier       User?            @relation("VerifiedBy", fields: [verifiedBy], references: [userId])

  @@id([organizationId, userId])
  @@index([role])
  @@index([isVerified])
  @@index([userId], map: "organization_users_userId_fkey")
  @@map("organization_users")
}

model Cause {
  causeId        BigInt       @id @default(autoincrement())
  organizationId BigInt
  title          String
  description    String?      @db.Text
  isPublic       Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  introVideoUrl  String?      @db.VarChar(500)
  assignments    Assignment[]
  organization   Organization @relation(fields: [organizationId], references: [organizationId], onDelete: Cascade)
  lectures       Lecture[]

  @@index([organizationId])
  @@index([isPublic])
  @@map("cause")
}

model Lecture {
  lectureId      BigInt          @id @default(autoincrement())
  causeId        BigInt
  title          String
  content        String?         @db.Text
  isPublic       Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  description    String?         @db.Text
  liveLink       String?         @db.VarChar(500)
  liveMode       String?         @db.VarChar(50)
  mode           String?         @db.VarChar(50)
  recordingUrl   String?         @db.VarChar(500)
  timeEnd        DateTime?
  timeStart      DateTime?
  venue          String?         @db.VarChar(255)
  documentations Documentation[]
  cause          Cause           @relation(fields: [causeId], references: [causeId], onDelete: Cascade)

  @@index([causeId])
  @@index([isPublic])
  @@index([timeStart])
  @@index([mode])
  @@map("lecture")
}

model Assignment {
  assignmentId BigInt    @id @default(autoincrement())
  causeId      BigInt
  title        String
  description  String?   @db.Text
  dueDate      DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  cause        Cause     @relation(fields: [causeId], references: [causeId], onDelete: Cascade)

  @@index([causeId])
  @@index([dueDate])
  @@map("assignment")
}

model Documentation {
  documentationId BigInt   @id @default(autoincrement())
  lectureId       BigInt
  title           String
  content         String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  description     String?  @db.Text
  docUrl          String?  @db.VarChar(500)
  lecture         Lecture  @relation(fields: [lectureId], references: [lectureId], onDelete: Cascade)

  @@index([lectureId])
  @@map("documentation")
}

enum InstituteRole {
  STUDENT
  FACULTY
  STAFF
  ADMIN
  DIRECTOR
}

enum OrganizationType {
  INSTITUTE
  GLOBAL
}

enum OrganizationRole {
  MEMBER
  MODERATOR
  ADMIN
  PRESIDENT
}

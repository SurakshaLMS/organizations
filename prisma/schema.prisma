generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("LAAS_DATABASE_URL")
}

// ============================================================================
// IMPORTANT: MySQL Configuration for Production
// ============================================================================
// Add to your MySQL configuration file (my.cnf or my.ini):
//
// [mysqld]
// sql_mode = "STRICT_TRANS_TABLES,NO_ZERO_DATE,NO_ZERO_IN_DATE"
// 
// This prevents invalid datetime values like '0000-00-00 00:00:00'
// All datetime fields use @db.DateTime(0) for proper MySQL compatibility
// All createdAt/updatedAt fields have @default(now()) to prevent NULL values
// ============================================================================

model User {
  userId             BigInt    @id @default(autoincrement()) @map("id")
  email              String    @unique
  password           String?   @db.VarChar(500)
  firstName          String    @map("first_name") @db.VarChar(100)
  lastName           String?   @map("last_name") @db.VarChar(100)
  phoneNumber        String?   @map("phone_number") @db.VarChar(20)
  dateOfBirth        DateTime? @map("date_of_birth") @db.Date
  gender             Gender?
  nic                String?   @unique @db.VarChar(20)
  birthCertificateNo String?   @unique @map("birth_certificate_no") @db.VarChar(50)
  addressLine1       String?   @map("address_line1") @db.Text
  addressLine2       String?   @map("address_line2") @db.Text
  city               String?   @db.VarChar(100)
  district           String?   @db.VarChar(100)
  province           String?   @db.VarChar(100)
  postalCode         String?   @map("postal_code") @db.VarChar(20)
  country            String?   @db.VarChar(100)
  subscriptionPlan   String?   @map("subscription_plan")
  paymentExpiresAt   DateTime? @map("payment_expires_at")
  imageUrl           String?   @map("image_url") @db.VarChar(255)
  idUrl              String?   @map("id_url") @db.VarChar(500)
  isActive           Boolean   @default(true) @map("is_active")
  createdAt          DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt          DateTime  @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)

  instituteUsers         InstituteUser[]
  organizationUsers      OrganizationUser[]
  verifiedUsers          OrganizationUser[] @relation("VerifiedBy")
  verifiedInstituteUsers InstituteUser[]    @relation("InstituteVerifiedBy")

  @@map("users")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Institute {
  instituteId BigInt        @id @default(autoincrement()) @map("id")
  name        String        @db.VarChar(255)
  code        String        @unique @db.VarChar(50)
  email       String        @unique @db.VarChar(255)
  phone       String?       @db.VarChar(20)
  address     String?       @db.Text
  city        String?       @db.VarChar(100)
  state       String?       @db.VarChar(100)
  country     String?       @db.VarChar(100)
  pinCode     String?       @map("pin_code") @db.VarChar(20)
  type        InstituteType @default(school)
  imageUrl    String?       @db.VarChar(255)
  isActive    Boolean       @default(true) @map("is_active")
  createdAt   DateTime      @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt   DateTime      @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)

  instituteUsers InstituteUser[]
  organizations  Organization[]

  @@map("institutes")
}

enum InstituteType {
  school
  tuition_institute
  online_academy
  pre_school
  other
}

model InstituteUser {
  instituteId     BigInt              @map("institute_id")
  userId          BigInt              @map("user_id")
  status          InstituteUserStatus @default(PENDING)
  instituteUserId String?             @map("user_id_institue") @db.VarChar(50)
  verifiedBy      BigInt?             @map("verified_by")
  verifiedAt      DateTime?           @map("verified_at") @db.DateTime(0)
  createdAt       DateTime            @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt       DateTime            @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)

  institute Institute @relation(fields: [instituteId], references: [instituteId], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  verifier  User?     @relation("InstituteVerifiedBy", fields: [verifiedBy], references: [userId])

  @@id([instituteId, userId])
  @@index([userId], map: "institute_users_userId_fkey")
  @@map("institute_user")
}

enum InstituteUserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
  FORMER
  INVITED
}

model Organization {
  organizationId             BigInt           @id @default(autoincrement())
  name                       String           @db.VarChar(255)
  type                       OrganizationType
  isPublic                   Boolean          @default(false)
  enrollmentKey              String?          @db.VarChar(255)
  needEnrollmentVerification Boolean          @default(true)
  enabledEnrollments         Boolean          @default(true)
  imageUrl                   String?          @db.VarChar(500)
  instituteId                BigInt?
  createdAt                  DateTime         @default(now()) @db.DateTime(0)
  updatedAt                  DateTime         @default(now()) @updatedAt @db.DateTime(0)

  causes            Cause[]
  institute         Institute?         @relation(fields: [instituteId], references: [instituteId])
  organizationUsers OrganizationUser[]

  @@index([type])
  @@index([isPublic])
  @@index([instituteId])
  @@map("org_organizations")
}

model OrganizationUser {
  organizationId BigInt
  userId         BigInt
  role           OrganizationRole @default(MEMBER)
  isVerified     Boolean          @default(false)
  verifiedBy     BigInt?
  verifiedAt     DateTime?        @db.DateTime(0)
  createdAt      DateTime         @default(now()) @db.DateTime(0)
  updatedAt      DateTime         @default(now()) @updatedAt @db.DateTime(0)

  organization Organization @relation(fields: [organizationId], references: [organizationId], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  verifier     User?        @relation("VerifiedBy", fields: [verifiedBy], references: [userId])

  @@id([organizationId, userId])
  @@index([role])
  @@index([isVerified])
  @@index([userId], map: "organization_users_userId_fkey")
  @@map("org_organization_users")
}

model Cause {
  causeId        BigInt   @id @default(autoincrement())
  organizationId BigInt
  title          String   @db.VarChar(255)
  description    String?  @db.Text
  isPublic       Boolean  @default(false)
  introVideoUrl  String?  @db.VarChar(500)
  imageUrl       String?  @db.VarChar(500)
  createdAt      DateTime @default(now()) @db.DateTime(0)
  updatedAt      DateTime @default(now()) @updatedAt @db.DateTime(0)

  assignments  Assignment[]
  organization Organization @relation(fields: [organizationId], references: [organizationId], onDelete: Cascade)
  lectures     Lecture[]

  @@index([organizationId])
  @@index([isPublic])
  @@map("org_causes")
}

model Lecture {
  lectureId    BigInt    @id @default(autoincrement())
  causeId      BigInt
  title        String    @db.VarChar(255)
  content      String?   @db.Text
  description  String?   @db.Text
  isPublic     Boolean   @default(false)
  liveLink     String?   @db.VarChar(500)
  liveMode     String?   @db.VarChar(50)
  mode         String?   @db.VarChar(50)
  recordingUrl String?   @db.VarChar(500)
  timeEnd      DateTime? @db.DateTime(0)
  timeStart    DateTime? @db.DateTime(0)
  venue        String?   @db.VarChar(255)
  createdAt    DateTime  @default(now()) @db.DateTime(0)
  updatedAt    DateTime  @default(now()) @updatedAt @db.DateTime(0)

  documentations Documentation[]
  cause          Cause           @relation(fields: [causeId], references: [causeId], onDelete: Cascade)

  @@index([causeId])
  @@index([isPublic])
  @@index([timeStart])
  @@index([mode])
  @@map("org_lectures")
}

model Assignment {
  assignmentId BigInt    @id @default(autoincrement())
  causeId      BigInt
  title        String    @db.VarChar(255)
  description  String?   @db.Text
  dueDate      DateTime? @db.DateTime(0)
  createdAt    DateTime  @default(now()) @db.DateTime(0)
  updatedAt    DateTime  @default(now()) @updatedAt @db.DateTime(0)

  cause Cause @relation(fields: [causeId], references: [causeId], onDelete: Cascade)

  @@index([causeId])
  @@index([dueDate])
  @@map("org_assignments")
}

model Documentation {
  documentationId BigInt   @id @default(autoincrement())
  lectureId       BigInt
  title           String   @db.VarChar(255)
  content         String?  @db.Text
  description     String?  @db.Text
  docUrl          String?  @db.VarChar(500)
  createdAt       DateTime @default(now()) @db.DateTime(0)
  updatedAt       DateTime @default(now()) @updatedAt @db.DateTime(0)

  lecture Lecture @relation(fields: [lectureId], references: [lectureId], onDelete: Cascade)

  @@index([lectureId])
  @@map("org_documentation")
}

enum InstituteRole {
  STUDENT
  FACULTY
  STAFF
  ADMIN
  DIRECTOR
}

enum OrganizationType {
  INSTITUTE
  GLOBAL
}

enum OrganizationRole {
  MEMBER
  MODERATOR
  ADMIN
  PRESIDENT
}

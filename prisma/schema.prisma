// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// EXTERNAL TABLES (Read-only, no CRUD operations)
// ============================================================================

// Main user table managed externally
model User {
  userId     BigInt    @id @default(autoincrement()) @db.BigInt
  email      String    @unique @db.VarChar(191)
  password   String    @db.VarChar(255) // Hashed password for authentication
  name       String    @db.VarChar(191)
  lastSyncAt DateTime? // Last time this record was synced
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  instituteUsers       InstituteUser[]
  organizationUsers    OrganizationUser[]

  @@map("user")
}

// Institute table managed externally
model Institute {
  instituteId BigInt    @id @default(autoincrement()) @db.BigInt
  name        String    @db.VarChar(191)
  imageUrl    String?   @db.VarChar(500)
  lastSyncAt  DateTime? // Last time this record was synced
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  instituteUsers InstituteUser[]
  organizations  Organization[] // Organizations assigned to this institute

  @@map("institute")
}

// Junction table for institute users (managed externally)
// Enum for institute user roles
enum InstituteRole {
  STUDENT
  FACULTY
  STAFF
  ADMIN
  DIRECTOR
}

model InstituteUser {
  instituteId   BigInt        @db.BigInt
  userId        BigInt        @db.BigInt
  role          InstituteRole @default(STUDENT)
  isActive      Boolean       @default(true)
  lastSyncAt    DateTime?     // Last time this record was synced
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  institute    Institute @relation(fields: [instituteId], references: [instituteId], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([instituteId, userId])
  @@map("institute_users")
}

// ============================================================================
// ORGANIZATION SYSTEM (Full CRUD)
// ============================================================================

// Enum for organization types
enum OrganizationType {
  INSTITUTE
  GLOBAL
}

// Organization table
model Organization {
  organizationId BigInt           @id @default(autoincrement()) @db.BigInt
  name           String           @db.VarChar(191)
  type           OrganizationType
  isPublic       Boolean          @default(false)
  enrollmentKey  String?          @db.VarChar(191) // Nullable for public organizations (non-unique)
  instituteId    BigInt?          @db.BigInt // Link to institute (optional)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  institute         Institute?         @relation(fields: [instituteId], references: [instituteId], onDelete: SetNull)
  organizationUsers OrganizationUser[]
  causes            Cause[]

  @@index([type])
  @@index([isPublic])
  @@index([instituteId])
  @@map("organization")
}

// Enum for user roles in organizations
enum OrganizationRole {
  MEMBER
  MODERATOR
  ADMIN
  PRESIDENT
}

// Junction table for organization users
model OrganizationUser {
  organizationId BigInt           @db.BigInt
  userId         BigInt           @db.BigInt
  role           OrganizationRole @default(MEMBER)
  isVerified     Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [organizationId], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([organizationId, userId])
  @@index([role])
  @@index([isVerified])
  @@map("organization_users")
}

// ============================================================================
// CAUSE SYSTEM (Full CRUD)
// ============================================================================

// Cause table linked to organizations
model Cause {
  causeId        BigInt   @id @default(autoincrement()) @db.BigInt
  organizationId BigInt   @db.BigInt
  title          String   @db.VarChar(191)
  description    String?  @db.Text
  introVideoUrl  String?  @db.VarChar(500) // Introduction video URL
  isPublic       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [organizationId], onDelete: Cascade)
  lectures     Lecture[]
  assignments  Assignment[]

  @@index([organizationId])
  @@index([isPublic])
  @@map("cause")
}

// ============================================================================
// LECTURE SYSTEM (Full CRUD)
// ============================================================================

// Lecture table linked to causes
model Lecture {
  lectureId      BigInt   @id @default(autoincrement()) @db.BigInt
  causeId        BigInt   @db.BigInt
  title          String   @db.VarChar(191)
  description    String?  @db.Text
  content        String?  @db.Text
  venue          String?  @db.VarChar(255) // Physical venue or online platform details
  mode           String?  @db.VarChar(50)  // 'online' or 'physical'
  timeStart      DateTime?                 // Start time of lecture
  timeEnd        DateTime?                 // End time of lecture
  liveLink       String?  @db.VarChar(500) // Live streaming link
  liveMode       String?  @db.VarChar(50)  // 'youtube', 'meet', 'zoom', etc.
  recordingUrl   String?  @db.VarChar(500) // Recording URL after lecture
  isPublic       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  cause           Cause           @relation(fields: [causeId], references: [causeId], onDelete: Cascade)
  documentations  Documentation[]

  @@index([causeId])
  @@index([isPublic])
  @@index([timeStart])
  @@index([mode])
  @@map("lecture")
}

// ============================================================================
// ASSIGNMENT SYSTEM (Full CRUD)
// ============================================================================

// Assignment table linked to causes
model Assignment {
  assignmentId BigInt    @id @default(autoincrement()) @db.BigInt
  causeId      BigInt    @db.BigInt
  title        String    @db.VarChar(191)
  description  String?   @db.Text
  dueDate      DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  cause Cause @relation(fields: [causeId], references: [causeId], onDelete: Cascade)

  @@index([causeId])
  @@index([dueDate])
  @@map("assignment")
}

// ============================================================================
// DOCUMENTATION SYSTEM (Full CRUD)
// ============================================================================

// Documentation table linked to lectures
model Documentation {
  documentationId BigInt   @id @default(autoincrement()) @db.BigInt
  lectureId       BigInt   @db.BigInt
  title           String   @db.VarChar(191)
  description     String?  @db.Text         // Description of the document
  content         String?  @db.Text
  docUrl          String?  @db.VarChar(500) // Document URL (PDF, DOC, etc.)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  lecture Lecture @relation(fields: [lectureId], references: [lectureId], onDelete: Cascade)

  @@index([lectureId])
  @@map("documentation")
}
